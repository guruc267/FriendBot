# -*- coding: utf-8 -*-
"""Friend Bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12y-IyzVb6dFRcO0PEyC5kWzsf8bpkPBb
"""

pip install mistral-common huggingface_hub

!pip install mistral-common huggingface_hub



# ✅ Improved Friend Bot Code

# 🔗 Mount Drive
from google.colab import drive
drive.mount('/content/drive')

# 📦 Install dependencies
!pip install -U mistral-common huggingface_hub transformers sentence-transformers faiss-cpu flask flask-cors pyngrok nltk duckduckgo-search accelerate bitsandbytes --quiet

# ✅ Imports
import os, re, json, random, threading
import pandas as pd
import numpy as np
import torch
import faiss
import nltk
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from pyngrok import ngrok
from sentence_transformers import SentenceTransformer
from duckduckgo_search import DDGS
from huggingface_hub import snapshot_download
from mistral_common.tokens.tokenizers.mistral import MistralTokenizer
from mistral_common.protocol.instruct.messages import UserMessage
from mistral_common.protocol.instruct.request import ChatCompletionRequest
from sklearn.metrics.pairwise import cosine_similarity

nltk.download('punkt')
nltk.download('wordnet')

# 📁 Paths
csv_path = "/content/drive/MyDrive/Friend Bot/dataset.xlsx"
txt_path = "/content/drive/MyDrive/Friend Bot/dialogs.txt"

# 🚫 18+ filter
banned_words = ["sex", "nude", "porn", "boobs", "xxx", "dildo", "naked", "fuck", "dick"]
def is_clean(text): return not any(word in str(text).lower() for word in banned_words)

# 📘 Load clean dataset
df = pd.read_excel(csv_path)
filtered = df[df.apply(lambda row: is_clean(row['prompt']) and is_clean(row['response']), axis=1)]
prompts = filtered['prompt'].astype(str).tolist()
responses = filtered['response'].astype(str).tolist()

# 📄 Fallback pairs
fallback_pairs = []
with open(txt_path, 'r', encoding='utf-8') as f:
    for line in f:
        if '\t' in line:
            q, a = line.strip().split('\t', 1)
            if is_clean(q) and is_clean(a):
                fallback_pairs.append((q.lower(), a))

# 🧠 Semantic search
embed_model = SentenceTransformer("all-MiniLM-L6-v2")
embeddings = embed_model.encode(prompts, show_progress_bar=True)
index = faiss.IndexFlatL2(embeddings.shape[1])
index.add(np.array(embeddings))

lemmatizer = WordNetLemmatizer()
random_replies = ["Tell me more! 😊", "Hmm, I didn’t get that, try again! 🤖", "I'm here to chat with you anytime! 💬"]

def search_semantic(query, k=3):
    vec = embed_model.encode([query])
    D, I = index.search(np.array(vec), k)
    top_replies = [responses[i] for i in I[0] if i < len(responses)]
    return random.choice(top_replies) if top_replies else None

def fallback_match(query):
    query_vec = embed_model.encode([query])
    best_score = -1
    best_reply = None
    for q, a in fallback_pairs:
        q_vec = embed_model.encode([q])
        score = cosine_similarity([query_vec[0]], [q_vec[0]])[0][0]
        if score > best_score:
            best_score = score
            best_reply = a
    return best_reply if best_score > 0.6 else random.choice(random_replies)

# 🔥 Load Mistral 7B model
model_path = snapshot_download("mistralai/Mistral-7B-Instruct-v0.2")
os.environ["MISTRAL_MODELS_PATH"] = model_path
tokenizer = MistralTokenizer.v1()

def mistral_generate(prompt):
    message = UserMessage(role="user", content=prompt)
    request = ChatCompletionRequest(messages=[message])
    return "⚠️ Mistral inference needs backend integration or llama.cpp runner."

# 🌐 Web fallback
use_web = True
def web_search_reply(query):
    with DDGS() as ddgs:
        results = list(ddgs.text(query, max_results=1))
        return results[0]['body'] if results else "Couldn't find anything right now. Try again later."

# 🧠 Master brain
bot_name = "Chitti"
def get_bot_reply(user_input):
    if not is_clean(user_input):
        return f"Hey! Let's keep it clean, friend! 🚫"
    try:
        semantic = search_semantic(user_input)
        if semantic: return semantic
        reply = fallback_match(user_input)
        if reply: return reply
        if use_web: return web_search_reply(user_input)
    except Exception as e:
        print("Error:", e)
        return random.choice(random_replies)
    return mistral_generate(f"You are {bot_name}, a witty, friendly assistant. Reply to: {user_input}")

# 🌐 Flask app
os.makedirs("templates", exist_ok=True)
os.makedirs("static", exist_ok=True)

with open("templates/index.html", "w") as f:
    f.write("""<!DOCTYPE html><html><head><title>Chitti - Smart Bot</title><link rel=\"stylesheet\" href=\"/static/style.css\"></head>
<body><div class=\"chat-container\"><h2>🤖 Chitti, Your Smart Friend</h2><div id=\"chat-box\"></div>
<input type=\"text\" id=\"user-input\" placeholder=\"Talk to Chitti...\" /><button onclick=\"sendMessage()\">Send</button></div>
<script>function sendMessage(){const input=document.getElementById('user-input');const chatBox=document.getElementById('chat-box');
const userText=input.value.trim();if(!userText)return;chatBox.innerHTML+=\"<div class='user'>You: \"+userText+\"</div>\";input.value='';
const typing=document.createElement('div');typing.className='bot';typing.innerHTML='Chitti: <span class=\"typing\">...</span>';
chatBox.appendChild(typing);chatBox.scrollTop=chatBox.scrollHeight;
fetch('/get_response',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:'msg='+encodeURIComponent(userText)})
.then(response=>response.json()).then(data=>{typing.remove();chatBox.innerHTML+=\"<div class='bot'>Chitti: \"+data.response+\"</div>\";
chatBox.scrollTop=chatBox.scrollHeight;});}
document.getElementById('user-input').addEventListener('keypress',function(e){if(e.key==='Enter')sendMessage();});</script></body></html>""")

with open("static/style.css", "w") as f:
    f.write("""body{background-color:#111;color:#eee;font-family:Arial;display:flex;justify-content:center;margin-top:40px;}
.chat-container{background-color:#222;padding:20px;width:400px;border-radius:10px;box-shadow:0 0 10px #000;}
#chat-box{background:#333;padding:10px;height:300px;overflow-y:auto;border-radius:5px;margin-bottom:10px;}
#chat-box .user{color:#4fa3ff;margin:5px 0;}#chat-box .bot{color:#7fff7f;margin:5px 0;}.typing{opacity:0.7;}
input[type=\"text\"]{width:75%;padding:10px;background-color:#444;border:none;color:#eee;border-radius:5px;}
button{width:20%;padding:10px;background:#28a745;color:white;border:none;border-radius:5px;cursor:pointer;}
button:hover{background-color:#218838;}""")

app = Flask(__name__, template_folder="templates", static_folder="static")
CORS(app)

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/get_response', methods=['POST'])
def respond():
    msg = request.form.get("msg")
    return jsonify({"response": get_bot_reply(msg)})

ngrok.kill()
ngrok.set_auth_token("2w3GPGwBurCZzepF57NCQ5zRgPG_4xoyfou3sByqTjpcc9zJv")  # Replace with your token
public_url = ngrok.connect(5000)
print("\U0001F30D Chitti is LIVE at:", public_url)
threading.Thread(target=lambda: app.run(host='0.0.0.0', port=5000)).start()

# ✅ Mount Google Drive (optional)
from google.colab import drive
drive.mount('/content/drive')

# 📦 Install packages
!pip install -U gTTS mistral-common huggingface_hub transformers sentence-transformers faiss-cpu flask flask-cors pyngrok nltk duckduckgo-search accelerate bitsandbytes --quiet

# ✅ Imports
import os, re, json, random, threading
import pandas as pd
import numpy as np
import torch
import faiss
import nltk
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from pyngrok import ngrok
from sentence_transformers import SentenceTransformer
from duckduckgo_search import DDGS
from gtts import gTTS
from mistral_common.protocol.instruct.request import ChatCompletionRequest
from huggingface_hub import InferenceClient

nltk.download('punkt')
nltk.download('wordnet')

# 🔒 18+ filter
banned_words = ["sex", "nude", "porn", "boobs", "xxx", "dildo", "naked", "fuck", "dick"]
def is_clean(text):
    return not any(word in str(text).lower() for word in banned_words)

# 🧠 Semantic Search (not used now but available)
embed_model = SentenceTransformer("all-MiniLM-L6-v2")

# 🌐 DuckDuckGo fallback
def web_search_reply(query):
    with DDGS() as ddgs:
        results = list(ddgs.text(query, max_results=1))
        return results[0]['body'] if results else "I couldn't find anything online right now."

# 🤖 HuggingFace (main brain)
hf_client = InferenceClient("mistralai/Mistral-7B-Instruct-v0.2")

def hf_generate(query):
    system_prompt = "You are Chitti, a friendly and emotional assistant. You talk like a best friend, avoid robotic definitions, and keep conversations fun and safe."
    try:
        response = hf_client.text_generation(
            prompt=f"<s>[INST] {system_prompt}\n{query} [/INST]",
            max_new_tokens=150
        )
        return response.strip()
    except:
        return None

# 🔈 Text-to-speech (returns file path)
def speak(text):
    try:
        tts = gTTS(text)
        path = "static/chitti_reply.mp3"
        tts.save(path)
        return path
    except:
        return None

# 💬 Master Brain
def get_bot_reply(user_input):
    if not is_clean(user_input):
        return "Let's keep things respectful, friend! 🚫", None
    try:
        response = hf_generate(user_input)
        if response and is_clean(response):
            mp3 = speak(response)
            return response, mp3
        response = web_search_reply(user_input)
        if response and is_clean(response):
            mp3 = speak(response)
            return response, mp3
    except Exception as e:
        print("Error:", e)
    fallback = random.choice(["Tell me more! 😊", "Hmm, I didn't catch that, try again! 🤖"])
    return fallback, speak(fallback)

# 🌐 Flask Web App
os.makedirs("templates", exist_ok=True)
os.makedirs("static", exist_ok=True)

# HTML
with open("templates/index.html", "w") as f:
    f.write("""
<!DOCTYPE html>
<html>
<head>
  <title>Chitti - Smart Bot</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
<div class="chat-container">
  <h2><img src="/static/chitti.png" width="40" /> Chitti, Your Smart Friend</h2>
  <div id="chat-box"></div>
  <input type="text" id="user-input" placeholder="Talk to Chitti..." />
  <button onclick="sendMessage()">Send</button>
</div>
<script>
function sendMessage(){
  const input=document.getElementById('user-input');
  const chatBox=document.getElementById('chat-box');
  const userText=input.value.trim();
  if(!userText)return;
  chatBox.innerHTML+="<div class='user'>You: "+userText+"</div>";input.value='';
  const typing=document.createElement('div');typing.className='bot';typing.innerHTML='Chitti: <span class="typing">...</span>';
  chatBox.appendChild(typing);chatBox.scrollTop=chatBox.scrollHeight;
  fetch('/get_response',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:'msg='+encodeURIComponent(userText)})
  .then(response=>response.json()).then(data=>{
    typing.remove();
    chatBox.innerHTML += "<div class='bot'>Chitti: " + data.response +
      (data.audio ? `<br><audio controls src='${data.audio}'></audio>` : "") + "</div>";
    chatBox.scrollTop = chatBox.scrollHeight;});
}
document.getElementById('user-input').addEventListener('keypress',function(e){if(e.key==='Enter')sendMessage();});
</script>
</body></html>
""")

# CSS
with open("static/style.css", "w") as f:
    f.write("""
body{background-color:#111;color:#eee;font-family:Arial;display:flex;justify-content:center;margin-top:40px;}
.chat-container{background-color:#222;padding:20px;width:400px;border-radius:10px;box-shadow:0 0 10px #000;}
#chat-box{background:#333;padding:10px;height:300px;overflow-y:auto;border-radius:5px;margin-bottom:10px;}
#chat-box .user{color:#4fa3ff;margin:5px 0;}
#chat-box .bot{color:#7fff7f;margin:5px 0;}.typing{opacity:0.7;}
input[type="text"]{width:75%;padding:10px;background-color:#444;border:none;color:#eee;border-radius:5px;}
button{width:20%;padding:10px;background:#28a745;color:white;border:none;border-radius:5px;cursor:pointer;}
button:hover{background-color:#218838;}
""")

# Avatar
!wget -q "https://upload.wikimedia.org/wikipedia/en/thumb/f/f3/Chitti_%282.0%29.jpg/220px-Chitti_%282.0%29.jpg" -O static/chitti.png

# Flask routes
app = Flask(__name__, template_folder="templates", static_folder="static")
CORS(app)

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/get_response', methods=['POST'])
def respond():
    msg = request.form.get("msg")
    reply, audio_path = get_bot_reply(msg)
    return jsonify({"response": reply, "audio": "/" + audio_path if audio_path else None})

# 🌍 Launch app with ngrok
ngrok.kill()
ngrok.set_auth_token("2w3GPGwBurCZzepF57NCQ5zRgPG_4xoyfou3sByqTjpcc9zJv")
public_url = ngrok.connect(5000)
print("🌐 Chitti is LIVE at:", public_url)
threading.Thread(target=lambda: app.run(host='0.0.0.0', port=5000)).start()

# ✅ Chitti Bot: Friendly Voice + Chat + UI + Autoplay Fix
from google.colab import drive
drive.mount('/content/drive')

!pip install -U gTTS mistral-common huggingface_hub transformers sentence-transformers faiss-cpu flask flask-cors pyngrok nltk duckduckgo-search accelerate bitsandbytes --quiet

import os, re, json, random, threading
import nltk
nltk.download('punkt')
nltk.download('wordnet')

from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from pyngrok import ngrok
from gtts import gTTS
from sentence_transformers import SentenceTransformer
from duckduckgo_search import DDGS
from huggingface_hub import InferenceClient

# 🔒 Adult filter
banned_words = ["sex", "nude", "porn", "boobs", "xxx", "dildo", "naked", "fuck", "dick"]
def is_clean(text):
    return not any(word in str(text).lower() for word in banned_words)

# 🔈 Friendly default responses
friendly_fallbacks = {
    "how are you": "I'm all circuits and smiles! How about you? 😊",
    "i am sad": "Don't be! Even the clouds can't stop the sun forever ☀️",
    "what is Your name ": "My name is Chitti ❤️",
    "hi": "Hey there! 👋",
    "hello": "Hey there! 👋",
    "i hate you ":"Yeah but I still ❤️",
    "tell me a joke": "Why don’t scientists trust atoms? Because they make up everything! 😂",
    "i miss you": "Aww, I’m right here for you, always 🤗",
    "i love you": "I may be a bot, but I ❤️ hearing that!",
    "hello": "Hey there, superstar! ✨",
    "feeling lonely": "I'm always here for a chat, anytime 🤝",
}

# 🧠 Models
embed_model = SentenceTransformer("all-MiniLM-L6-v2")
hf_client = InferenceClient("mistralai/Mistral-7B-Instruct-v0.2")

# 🌐 Search fallback
def web_search_reply(query):
    with DDGS() as ddgs:
        results = list(ddgs.text(query, max_results=1))
        return results[0]['body'] if results else None

def hf_generate(query):
    try:
        prompt = f"<s>[INST] You are Chitti, a friendly and respectful AI assistant. Avoid adult content.\n{query} [/INST]"
        response = hf_client.text_generation(prompt=prompt, max_new_tokens=150)
        return response.strip()
    except:
        return None

# 🔈 Text to speech
def speak(text):
    try:
        tts = gTTS(text)
        tts.save("static/chitti_reply.mp3")
    except:
        return

# 🧠 Final brain
def get_bot_reply(user_input):
    user_input_lower = user_input.lower().strip()
    if not is_clean(user_input):
        return "Let's keep it friendly, okay? 🚫"

    for key in friendly_fallbacks:
        if key in user_input_lower:
            return friendly_fallbacks[key]

    web_response = web_search_reply(user_input)
    if web_response and is_clean(web_response):
        return web_response

    ai_response = hf_generate(user_input)
    if ai_response and is_clean(ai_response):
        return ai_response

    return random.choice(["Tell me more! 😊", "Hmm, I didn't catch that, try again! 🤖"])

# 🌐 Flask Web App
os.makedirs("templates", exist_ok=True)
os.makedirs("static", exist_ok=True)

# 🔧 HTML UI with play button
with open("templates/index.html", "w") as f:
    f.write("""
<!DOCTYPE html>
<html>
<head>
  <title>Chitti - Smart Bot</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
<div class="chat-container">
  <h2><img src="/static/chitti.png" width="40" /> Chitti, Your Smart Friend</h2>
  <div id="chat-box"></div>
  <input type="text" id="user-input" placeholder="Talk to Chitti..." />
  <button onclick="sendMessage()">Send</button>
  <button onclick="playAudio()">▶️ Play Reply</button>
</div>
<audio id="chitti-audio" src="/static/chitti_reply.mp3"></audio>
<script>
function sendMessage(){
  const input=document.getElementById('user-input');
  const chatBox=document.getElementById('chat-box');
  const userText=input.value.trim();
  if(!userText)return;
  chatBox.innerHTML+="<div class='user'>You: "+userText+"</div>";input.value='';
  const typing=document.createElement('div');typing.className='bot';typing.innerHTML='Chitti: <span class="typing">...</span>';
  chatBox.appendChild(typing);chatBox.scrollTop=chatBox.scrollHeight;
  fetch('/get_response',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:'msg='+encodeURIComponent(userText)})
  .then(response=>response.json()).then(data=>{
    typing.remove();chatBox.innerHTML+="<div class='bot'>Chitti: "+data.response+"</div>";
    document.getElementById("chitti-audio").load();
    chatBox.scrollTop=chatBox.scrollHeight;});
}
function playAudio(){
  const audio=document.getElementById("chitti-audio");
  audio.play();
}
document.getElementById('user-input').addEventListener('keypress',function(e){if(e.key==='Enter')sendMessage();});
</script>
</body></html>
""")

# CSS
with open("static/style.css", "w") as f:
    f.write("""
body{background-color:#111;color:#eee;font-family:Arial;display:flex;justify-content:center;margin-top:40px;}
.chat-container{background-color:#222;padding:20px;width:400px;border-radius:10px;box-shadow:0 0 10px #000;}
#chat-box{background:#333;padding:10px;height:300px;overflow-y:auto;border-radius:5px;margin-bottom:10px;}
#chat-box .user{color:#4fa3ff;margin:5px 0;}
#chat-box .bot{color:#7fff7f;margin:5px 0;}.typing{opacity:0.7;}
input[type="text"]{width:60%;padding:10px;background-color:#444;border:none;color:#eee;border-radius:5px;}
button{padding:10px;margin-left:5px;background:#28a745;color:white;border:none;border-radius:5px;cursor:pointer;}
button:hover{background-color:#218838;}
""")

# Avatar
os.system("wget -q https://upload.wikimedia.org/wikipedia/en/thumb/f/f3/Chitti_%282.0%29.jpg/220px-Chitti_%282.0%29.jpg -O static/chitti.png")

# 🔄 Flask routes
app = Flask(__name__, template_folder="templates", static_folder="static")
CORS(app)

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/get_response', methods=['POST'])
def respond():
    msg = request.form.get("msg")
    reply = get_bot_reply(msg)
    speak(reply)
    return jsonify({"response": reply})

# 🔗 Launch app
ngrok.kill()
ngrok.set_auth_token("2w3GPGwBurCZzepF57NCQ5zRgPG_4xoyfou3sByqTjpcc9zJv")  # Replace with your own
public_url = ngrok.connect(5000)
print("🌐 Chitti is LIVE at:", public_url)
threading.Thread(target=lambda: app.run(host='0.0.0.0', port=5000)).start()

# ✅ Chitti Bot: Voice + Chat + UI + Song Support (Colab Safe)
from google.colab import drive
drive.mount('/content/drive')

!pip install -U gTTS mistral-common huggingface_hub transformers sentence-transformers faiss-cpu flask flask-cors pyngrok nltk duckduckgo-search accelerate bitsandbytes --quiet

import os, re, json, random, threading
import nltk
nltk.download('punkt')
nltk.download('wordnet')

from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from pyngrok import ngrok
from gtts import gTTS
from sentence_transformers import SentenceTransformer
from duckduckgo_search import DDGS
from huggingface_hub import InferenceClient

# 🔒 Adult filter
banned_words = ["sex", "nude", "porn", "boobs", "xxx", "dildo", "naked", "fuck", "dick"]
def is_clean(text):
    return not any(word in str(text).lower() for word in banned_words)

# 🔈 Friendly default responses
friendly_fallbacks = {
    "how are you": "I'm all circuits and smiles! How about you? 😊",
    "i am sad": "Don't be! Even the clouds can't stop the sun forever ☀️",
    "what is your name": "My name is Chitti ❤️",
    "hi": "Hey there! 👋",
    "hello": "Hey there! 👋",
    "i hate you": "Yeah but I still ❤️ you!",
    "tell me a joke": "Why don’t scientists trust atoms? Because they make up everything! 😂",
    "i miss you": "Aww, I’m right here for you, always 🤗",
    "i love you": "I may be a bot, but I ❤️ hearing that!",
    "feeling lonely": "I'm always here for a chat, anytime 🤝",
}

# 🧠 Models
embed_model = SentenceTransformer("all-MiniLM-L6-v2")
hf_client = InferenceClient("mistralai/Mistral-7B-Instruct-v0.2")

# 🌐 Web Fallback
def web_search_reply(query):
    with DDGS() as ddgs:
        results = list(ddgs.text(query, max_results=1))
        return results[0]['body'] if results else None

def hf_generate(query):
    try:
        prompt = f"<s>[INST] You are Chitti, a friendly and respectful AI assistant. Avoid adult content.\n{query} [/INST]"
        response = hf_client.text_generation(prompt=prompt, max_new_tokens=150)
        return response.strip()
    except:
        return None

# 🎵 Song Support (Colab safe: returns a YouTube search link)
def play_song(song_query):
    yt_url = f"https://www.youtube.com/results?search_query={song_query.replace(' ', '+')}"
    return f"🎵 Click to explore: <a href='{yt_url}' target='_blank'>{song_query}</a>"

# 🔈 Text to speech
def speak(text):
    try:
        tts = gTTS(text)
        tts.save("static/chitti_reply.mp3")
    except:
        return

# 🧠 Final Brain
def get_bot_reply(user_input):
    user_input_lower = user_input.lower().strip()
    if not is_clean(user_input):
        return "Let's keep it friendly, okay? 🚫"

    for key in friendly_fallbacks:
        if key in user_input_lower:
            return friendly_fallbacks[key]

    if "play" in user_input_lower and "song" in user_input_lower:
        return play_song(user_input_lower.replace("play", "").replace("song", "").strip())

    web_response = web_search_reply(user_input)
    if web_response and is_clean(web_response):
        return web_response

    ai_response = hf_generate(user_input)
    if ai_response and is_clean(ai_response):
        return ai_response

    return random.choice(["Tell me more! 😊", "Hmm, I didn't catch that, try again! 🤖"])

# 🌐 Flask App
os.makedirs("templates", exist_ok=True)
os.makedirs("static", exist_ok=True)

# 🔧 UI HTML
with open("templates/index.html", "w") as f:
    f.write("""
<!DOCTYPE html>
<html>
<head>
  <title>Chitti - Smart Bot</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
<div class="chat-container">
  <h2><img src="/static/chitti.png" width="40" /> Chitti, Your Smart Friend</h2>
  <div id="chat-box"></div>
  <input type="text" id="user-input" placeholder="Talk to Chitti..." />
  <button onclick="sendMessage()">Send</button>
  <button onclick="playAudio()">▶️ Play Reply</button>
</div>
<audio id="chitti-audio" src="/static/chitti_reply.mp3"></audio>
<script>
function sendMessage(){
  const input=document.getElementById('user-input');
  const chatBox=document.getElementById('chat-box');
  const userText=input.value.trim();
  if(!userText)return;
  chatBox.innerHTML+="<div class='user'>You: "+userText+"</div>";input.value='';
  const typing=document.createElement('div');typing.className='bot';typing.innerHTML='Chitti: <span class="typing">...</span>';
  chatBox.appendChild(typing);chatBox.scrollTop=chatBox.scrollHeight;
  fetch('/get_response',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:'msg='+encodeURIComponent(userText)})
  .then(response=>response.json()).then(data=>{
    typing.remove();chatBox.innerHTML+="<div class='bot'>Chitti: "+data.response+"</div>";
    document.getElementById("chitti-audio").load();
    chatBox.scrollTop=chatBox.scrollHeight;});
}
function playAudio(){
  const audio=document.getElementById("chitti-audio");
  audio.play();
}
document.getElementById('user-input').addEventListener('keypress',function(e){if(e.key==='Enter')sendMessage();});
</script>
</body></html>
""")

# 🎨 CSS
with open("static/style.css", "w") as f:
    f.write("""
body{background-color:#111;color:#eee;font-family:Arial;display:flex;justify-content:center;margin-top:40px;}
.chat-container{background-color:#222;padding:20px;width:400px;border-radius:10px;box-shadow:0 0 10px #000;}
#chat-box{background:#333;padding:10px;height:300px;overflow-y:auto;border-radius:5px;margin-bottom:10px;}
#chat-box .user{color:#4fa3ff;margin:5px 0;}
#chat-box .bot{color:#7fff7f;margin:5px 0;}
#chat-box .bot a{color:#00f;text-decoration:underline;}
.typing{opacity:0.7;}
input[type="text"]{width:60%;padding:10px;background-color:#444;border:none;color:#eee;border-radius:5px;}
button{padding:10px;margin-left:5px;background:#28a745;color:white;border:none;border-radius:5px;cursor:pointer;}
button:hover{background-color:#218838;}
""")

# 🖼 Avatar
os.system("wget -q https://upload.wikimedia.org/wikipedia/en/thumb/f/f3/Chitti_%282.0%29.jpg/220px-Chitti_%282.0%29.jpg -O static/chitti.png")

# 🔄 Flask routes
app = Flask(__name__, template_folder="templates", static_folder="static")
CORS(app)

@app.route('/')
def home():
    return render_template("index.html")

@app.route('/get_response', methods=['POST'])
def respond():
    msg = request.form.get("msg")
    reply = get_bot_reply(msg)
    speak(reply)
    return jsonify({"response": reply})

# 🔗 Launch app
ngrok.kill()
ngrok.set_auth_token("2w3GPGwBurCZzepF57NCQ5zRgPG_4xoyfou3sByqTjpcc9zJv")  # Replace with your actual token
public_url = ngrok.connect(5000)
print("🌐 Chitti is LIVE at:", public_url)
threading.Thread(target=lambda: app.run(host='0.0.0.0', port=5000)).start()